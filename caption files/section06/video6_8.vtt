WEBVTT

00:01.330 --> 00:07.800
Now we come to the last part of our corrupt operations and that is to the.

00:07.810 --> 00:15.650
And it's delete to delete an entity to delete data from your repository from your database.

00:15.750 --> 00:18.480
You have basically two options.

00:18.480 --> 00:24.560
The first option is to use the building JPA repository delete method.

00:25.000 --> 00:28.290
And let's take a look at that now.

00:28.290 --> 00:35.210
JPA has the delete option with various alternatives.

00:35.370 --> 00:43.590
You can iterate through products and delete one by one and you can simply send a product and delete

00:43.590 --> 00:44.780
it.

00:44.820 --> 00:53.290
You can give it an ID and delete that way or you can delete all and delete all in batch.

00:53.530 --> 00:57.700
And this is a completely different way to delete it.

00:57.720 --> 01:05.030
You can you can batch process your data and delete them all one by one.

01:05.030 --> 01:12.370
And also you can use the batch delete process would then iterator with the product object.

01:12.440 --> 01:21.350
All right the delete method that we're going to focus in this tutorial as the lead product method.

01:22.850 --> 01:30.530
So the delete product method is accepting either an iterable or a product or ID.

01:30.830 --> 01:37.520
But in our case we're going to send it a simple product the product entity product object.

01:37.520 --> 01:40.990
So I want to do it the current product.

01:41.120 --> 01:48.210
So let me just say poetry and I want to delete it.

01:48.600 --> 01:49.570
All right.

01:49.580 --> 01:50.960
That's basically it.

01:50.960 --> 01:55.150
So let's run our query in our database and to do that.

01:55.430 --> 01:57.310
I'm going to rerun our application

02:04.650 --> 02:06.820
our applications starting up now.

02:15.460 --> 02:19.660
And as you can see we have a delete statement right here.

02:19.690 --> 02:25.560
The Hibernate to verify that if the product is actual delete it.

02:25.660 --> 02:30.950
Let's go back to our database to console and to do that.

02:30.970 --> 02:40.660
I'm going to open up Firefox again and let's just refresh our session with the database and reconnect

02:43.620 --> 02:47.280
Amico to our database and run our query.

02:47.280 --> 02:52.710
Now we have just two products in our database to turn 1 to 1 dad.

02:52.730 --> 03:02.230
With the price of 19 and the type of specific is not in this list in not it's not in our database.

03:02.580 --> 03:04.860
So we basically delete it.

03:04.860 --> 03:11.480
That's all you need to do about deleting with the actual JPA repository delete method.

03:11.610 --> 03:15.850
This is the very basic way of dealing with the JPA.

03:16.020 --> 03:25.730
So let's take out other alternatives we how we put a repository deletion to delete by a specific method

03:25.790 --> 03:29.590
or a specific query depending on your knees.

03:29.600 --> 03:37.490
All you have to do is to provide a name method for your delete but deleting that way can be costly and

03:37.490 --> 03:44.870
problematic because the delete method you're getting rid of the entity getting rid of the data in your

03:44.870 --> 03:49.080
database so you can't get it back in anyway.

03:49.130 --> 03:56.760
You have to rollback or provide some other method so that you can get back to the data you need.

03:56.750 --> 04:05.690
So as a failsafe mechanism and the way that we use delete in production is to first find it in the database

04:06.470 --> 04:10.830
in a real world application in a production grade application.

04:10.880 --> 04:18.770
You first get some parameters get some data to find the entity data we're going to delete and then you're

04:18.770 --> 04:26.850
going to delete the data with that actually find it and entity from your repository from your database.

04:26.870 --> 04:28.560
So let's take a look at it now.

04:29.860 --> 04:46.520
To do that I'm first going to try to find data from our repository and I'll say I want to find a product

04:49.320 --> 05:02.490
and this product is going to be found by the type and I'll provide the type as the general so that we

05:02.490 --> 05:13.830
can get the first product right after I find it I'll check that it is already there and it's found and

05:13.830 --> 05:14.240
it's not.

05:14.250 --> 05:15.360
No.

05:16.260 --> 05:21.210
And then I'm simply going to delete it.

05:21.510 --> 05:28.160
So I'll call the police method of Porlock repository.

05:28.230 --> 05:33.190
So I'll say delete and as you can see it's FOID.

05:33.190 --> 05:38.850
So we don't have any return value with our tweet Methot.

05:39.090 --> 05:51.570
So I'll say delete and I'll use the found product from our select statement from our find buy type method.

05:52.090 --> 06:03.160
So I'll simply say the product is deleted and to verify it deletion.

06:03.160 --> 06:12.070
I'm going to first print out the size of our database size of ourselves in our database in here and

06:12.070 --> 06:15.820
I'll say product count

06:18.730 --> 06:29.040
and our database is product repository that count.

06:29.410 --> 06:30.700
All right.

06:30.700 --> 06:43.540
And after deletion I'm going to say again product repository count in database

06:46.570 --> 06:51.090
is product repository count.

06:51.180 --> 06:52.150
All right.

06:52.540 --> 06:56.810
So let's run our application and see what's going on.

07:04.830 --> 07:06.730
Our application is starting up now.

07:10.050 --> 07:20.790
And as you can see before we delete the product from our database product count was 2 and that's because

07:20.790 --> 07:24.420
we forgot to delete the delete method in here.

07:24.450 --> 07:28.320
So it delete it the terp product from our database.

07:28.320 --> 07:32.970
So we're left with only one product in our database.

07:33.000 --> 07:40.340
Let's get rid of that and command it out and rerun our application to see actual result.

07:49.720 --> 07:58.480
And as you can see now before the delete operation we have three products in our database and after

07:58.480 --> 08:07.280
the actual delete and we have product is deleted and we have just two products in our database.

08:07.400 --> 08:17.120
Let's just we're terrified that in H2 database I'm going to refresh the session I'm connecting again

08:17.450 --> 08:26.860
and were selected data from our table as you can see we have just two records two roles in our database.

08:27.000 --> 08:33.630
And let's take out the one that would delete it if it's the actual one.

08:33.640 --> 08:38.600
So in our query we were saying we wanted to delete the general one.

08:38.770 --> 08:45.990
So the general one was the first product and the price for that first product was zero.

08:46.540 --> 08:54.070
As you can see we don't have any product with the price of zero and we don't have any general type product.

08:54.120 --> 09:01.680
All right to delete operation and spring data and is as simple as that.

09:01.790 --> 09:08.990
You either delete right away with the data that you already have or in a real world application again

09:09.530 --> 09:17.600
you first get some data to actually find the entity from your database from your data source and then

09:17.840 --> 09:20.660
you query that data with your data source.

09:20.810 --> 09:29.080
Then you delete that data which simply repository up delete method that basically all we need to know

09:29.080 --> 09:32.590
about sping data and JPA for a delete operation.
