WEBVTT

00:00.650 --> 00:10.350
All right now we know how to say in person our data now let's take a look at how we can search and find

00:10.520 --> 00:11.790
data that we need.

00:12.790 --> 00:19.660
To do that I'm going to create another product and say we need to do a repository so that we can search

00:19.720 --> 00:21.740
and find the data that we need.

00:22.700 --> 00:26.890
So let's start by adding another product.

00:26.990 --> 00:43.800
I'll start by product to add new product and this product is going to have to name as another tester

00:43.810 --> 00:44.430
product

00:54.360 --> 00:56.080
and description.

00:57.090 --> 01:07.270
It's going to be the same with the previous one so I'll copy that and paste it right here.

01:08.990 --> 01:27.550
And the category is going to be just the yen and the type is going to be something else this time.

01:27.740 --> 01:46.130
And let's say we want a custom product and for price this time we're going to say it's 15.

01:46.140 --> 01:47.220
All right.

01:47.700 --> 01:48.950
Now let's say you are data

01:52.850 --> 02:00.540
and calling repositories say method and I'm just giving it to product 2.

02:00.680 --> 02:06.310
And now let's run our application to see if everything's all right.

02:06.360 --> 02:12.640
And see if we can find our product to our database.

02:12.980 --> 02:14.570
So I'm running our application

02:30.220 --> 02:40.240
applications is started and as you can see in the log here we have to insert statements right now but

02:40.310 --> 02:48.380
these two statements says that the persistent product object into database two times just like we did

02:48.380 --> 02:48.870
here.

02:48.980 --> 02:55.500
We said we want it to persist product one first and then we created another product as part or two.

02:55.670 --> 02:57.970
And we saved that too.

02:57.980 --> 03:02.900
So in H-2 database we should be seeing two records of products.

03:02.900 --> 03:04.670
So let's take it out right now.

03:05.470 --> 03:07.480
I'm going to open up Firefox

03:10.350 --> 03:13.470
I'm going to go to localhost

03:15.760 --> 03:25.540
ADHD and H-2.

03:25.580 --> 03:30.930
All right we have our database Logan page.

03:31.290 --> 03:33.370
Let's just test our connection again.

03:33.820 --> 03:34.810
It's OK.

03:35.020 --> 03:36.050
And now let's connect

03:38.640 --> 03:46.540
areon Let's check out our product table and run our query.

03:46.570 --> 03:47.580
Here we go.

03:47.800 --> 03:52.680
We have two distinct products one with a different ID.

03:52.780 --> 04:00.190
And the other one with a completely different ID automatically generated by hibernate for us and the

04:00.190 --> 04:10.030
category is test in both products and the description is also the same but we changed the name and price

04:10.090 --> 04:13.910
and also the type of the product this time.

04:13.930 --> 04:18.490
So how are we going to find these products from our database.

04:18.490 --> 04:20.570
How are we going to query these products.

04:22.220 --> 04:31.870
To do that we're going to use First the simple method of the JPA and I'm just going to show it to you.

04:31.860 --> 04:43.860
Now JP has the fine methods built and with it so that you can effortlessly use these methods to find

04:43.860 --> 04:45.750
the object that you need.

04:45.750 --> 04:54.420
So let's take out these methods for a second find all method is automatically generated for us to bring

04:54.840 --> 04:58.180
a list of products as shown here.

04:58.620 --> 05:05.340
So it's a very convenient way that we can get all the products in the database without even writing

05:05.340 --> 05:07.110
a single line of code.

05:07.740 --> 05:14.310
And the other ones are various utility methods and you can make use of them too.

05:14.460 --> 05:20.740
And as you can see here we have a find one with the ID method.

05:20.860 --> 05:27.640
What this math does is if you know the idea of a product you can query for that and you can get the

05:27.640 --> 05:29.170
product right away.

05:29.170 --> 05:35.320
Let's get back to our focus and here and let's just find all the products that we need.

05:36.070 --> 05:42.880
So I'm going to just use the find all method and of course this find all method is going to return me

05:42.880 --> 05:44.200
a list of products.

05:44.290 --> 05:51.650
So I'm going to say that now list of products and it's going to be products.

05:51.910 --> 05:53.640
All right.

05:53.730 --> 06:00.630
So let's just print the list out so we can see what products we get with this method.

06:01.320 --> 06:15.580
So I'm going to make it for each loop and say that for each product and product in products

06:20.720 --> 06:27.250
I want to print out everything with these products and to printed out beautifully.

06:27.350 --> 06:36.650
Let's just add a logo to our class and how it looked just as these lines here to do that.

06:36.650 --> 06:48.560
I'm going to go up right here and say private logo and I'm going to use so 4G because it say very convenient

06:48.560 --> 06:50.910
method of logging things out.

06:50.960 --> 06:56.140
So I'm going to say private lager and I'm going to name a log.

06:56.240 --> 07:03.070
And so I'm going to get the logger and I'm going to use a factory for that.

07:03.230 --> 07:10.640
Again a cell for a logo factory and I'm going to get wagger and I'm going to get the class name in the

07:11.000 --> 07:18.850
method so I'm going to say repository application class.

07:18.890 --> 07:19.600
All right.

07:20.440 --> 07:28.300
So let's just make use of this lager here and I'm going to say Lagat.

07:28.870 --> 07:35.650
And as you can see here we have lots of different options for logging lots of different Woggles we have

07:35.920 --> 07:45.850
Infeld debug and error and you can also say that you can warn people with your logs and you can trace

07:45.850 --> 07:55.800
out the logs for exceptions and other things and again you can warn people at the right level of was.

07:55.810 --> 07:57.070
All right.

07:57.070 --> 08:05.140
So let's get back to it and I'm going to say I'm going to use in full level here because I'm just trying

08:05.140 --> 08:07.390
to list out the products that I have.

08:07.810 --> 08:09.520
So I'll say

08:12.400 --> 08:19.790
products found and I'm going to print out each product

08:27.750 --> 08:34.800
I'm just going to say strenge so we can get the complete object within the line.

08:34.800 --> 08:38.450
All right.

08:38.610 --> 08:46.930
So let's run our application for a second time and see what's going on.

08:47.140 --> 08:48.940
I'm rerunning our application now

08:57.970 --> 09:01.240
and here is coming up.

09:06.570 --> 09:07.840
All right.

09:08.130 --> 09:16.320
We have products found but we have a problem here because instead of the product we have dereferences

09:16.320 --> 09:19.530
of the product object rented out.

09:19.530 --> 09:23.070
So let's just go and fix that to fix that.

09:23.070 --> 09:30.970
What I'm going to do is I'm going to go to the product class and I'm going to generate the two screen

09:31.050 --> 09:33.150
method to do that.

09:33.150 --> 09:42.600
I'm going to hit command and I'm going to say to a string and I need all the fields to display.

09:42.600 --> 09:44.450
All right I'm going to hit.

09:44.500 --> 09:45.340
OK.

09:46.240 --> 09:47.620
And here we go.

09:49.270 --> 09:57.100
Let's just rerun our application and see our log for the second time and with the purified version

10:04.670 --> 10:06.760
our application is coming up again.

10:08.380 --> 10:13.180
And this time we should see the correct objects.

10:13.230 --> 10:14.420
Here we go.

10:14.790 --> 10:17.510
We have our products found in the database.

10:17.790 --> 10:24.540
And as you can see the first product with a different ID and the other one with a completely different

10:24.540 --> 10:31.090
ID and a name for the first product tester product on the other hand.

10:31.320 --> 10:35.940
The other one is another test product and the types are different.

10:36.240 --> 10:46.040
And as you can see prices are also different isn't that easy because all we used as the find method

10:46.100 --> 10:47.870
of the repository.

10:47.870 --> 10:51.080
And again that's coming from the JP repository.

10:51.550 --> 10:54.020
It's already provided for us.

10:54.080 --> 11:01.830
So now we know how to find all the objects in our repository but how about the custom queries that we

11:01.830 --> 11:02.490
need.

11:02.490 --> 11:10.470
For example we might want to search for a specific type specific name or even a specific prize or a

11:10.470 --> 11:12.580
category.

11:12.690 --> 11:14.650
How are we going to do that.

11:14.880 --> 11:23.340
The way to do that in JPA and spring Deda is named methods named methods that provide the natural way

11:23.340 --> 11:24.430
of curing your data.

11:24.450 --> 11:27.180
And it's very beautiful.

11:27.180 --> 11:31.820
Now let's take a look at it and write down some queries for our repository.

11:33.210 --> 11:40.250
To do that we're going to write down some methods in our interface in our product repository interface

11:41.190 --> 11:49.590
and with the help of the JPA repository our interface methods is going to be created as queries against

11:49.590 --> 11:51.630
the product repository.

11:51.630 --> 11:55.580
And there are going to be quarried in the database.

11:55.820 --> 12:04.200
That's a very very convenient way of carrying data and it's going to be amazing to know about this and

12:04.470 --> 12:08.610
to work with this type of repositories.

12:08.610 --> 12:15.020
So let's start by adding simple queries to our repository.

12:15.020 --> 12:24.260
First I'm going to say that I want to get product in the result and I want to find by

12:28.080 --> 12:35.030
all right and for the finding process to be actually done.

12:35.030 --> 12:43.100
I have to inject the type as the string because in the product POJO we said that type is going to be

12:43.100 --> 12:43.930
a string.

12:44.090 --> 12:50.210
So all provide the same name in the method for our interface method.

12:50.360 --> 12:59.800
And with that JPA is going to find a type for us and returned a product with that type.

13:00.080 --> 13:03.850
That's all you need to have your custom query.

13:03.890 --> 13:10.010
This is a very basic query but this is going to be amazing to know about because it's just a line of

13:10.010 --> 13:17.800
code and you don't have to implement anything any select statements or anything else just like that.

13:18.140 --> 13:19.140
All right.

13:19.360 --> 13:26.840
The named methods of the JPA repository by the help of spring is a very unique way of querying the data

13:27.320 --> 13:29.240
in any kind of repository.

13:29.330 --> 13:38.840
You can't even use a Monga D-B or read this or anything you can think about Pasqua school or anything

13:38.840 --> 13:39.860
else.

13:39.950 --> 13:46.730
And in our case we're running our Currie's against the H-2 database because of the spring data as abstractions

13:47.450 --> 13:52.300
we can again query against the any kind of database.

13:52.310 --> 13:57.430
So now let's work out how this query is going to turn out to do that.

13:57.440 --> 14:08.660
I'm going to go back to our application class and I'm going to say I want a product and this is going

14:08.660 --> 14:21.950
to be the result product and I will say that product repository and all coal find by type.

14:22.370 --> 14:26.490
And let's take out the types that we set in the first product.

14:26.510 --> 14:32.540
We said the type was general and in the second one we said it was custom.

14:32.570 --> 14:42.280
So that's Kuria our general type of product first and see if we can just get that one.

14:42.280 --> 14:43.230
All right.

14:44.660 --> 14:54.470
And to do that I'm just going to comment out these lines so we can see what's going on in the background.

14:54.470 --> 15:06.200
Actually the one that we're interested in and I'm going to log out this product and say your general

15:06.830 --> 15:18.920
type of product found and that's going to be our result product and I'm going to say to strenge.

15:19.020 --> 15:26.590
All right let's just rerun our application and see what's going on with the logs.

15:32.770 --> 15:34.480
Our application is booting up now

15:38.610 --> 15:50.160
and getting the logs printed out and here we go in the line before the last one is the line that we're

15:50.160 --> 15:51.470
interested in.

15:51.540 --> 16:00.550
So you can see that general type of product found and it was this one out with the ID and a name tester

16:00.550 --> 16:04.110
product and the category was test.

16:04.410 --> 16:13.190
Also the price was 0 and you might remember this from the first tutorial that we worked on this was

16:13.190 --> 16:15.310
our first product.

16:15.320 --> 16:20.140
All right we could find a product that we're interested in.

16:20.150 --> 16:25.930
So now let's try this out with the customer 1 see if we can find that too.

16:26.950 --> 16:28.880
I'm just reroute our application

16:33.020 --> 16:34.560
Our application is starting up now

16:41.430 --> 16:51.380
and here we go just don't worry about the look that we printed out here but we have found our product

16:51.770 --> 16:53.950
and it's with this ID.

16:54.080 --> 17:01.250
And as you can see the name is another tester product and this was the second product that we saved

17:01.250 --> 17:09.790
into our repository as you've seen in this example it's so very beautiful way to work on your repository

17:10.060 --> 17:13.780
with just a simple line of statement.

17:14.140 --> 17:21.320
And let's just improve our Currie's this time and and try to write down some complex examples.

17:24.030 --> 17:29.730
This time we're going to find against the description and category of fields.

17:29.880 --> 17:39.510
So as you'll remember our descriptions for the two objects as same and our categories also the same

17:39.510 --> 17:40.510
as test.

17:40.530 --> 17:45.120
So let's just make use of that and try to find these objects.

17:45.360 --> 17:50.170
So as a result again we're going to get a list of products.

17:50.400 --> 18:00.840
So I'll say list of products and find by description and category.

18:01.620 --> 18:12.150
And as the parameters what we're going to say we first need a description as to query.

18:12.460 --> 18:18.240
And the second one is going to be category.

18:18.240 --> 18:20.040
All right.

18:20.200 --> 18:23.140
So let's just wrap up what we've done here.

18:24.240 --> 18:35.590
What we said that we wanted a list of products and Arcuri is just like this we first sat we need the

18:35.620 --> 18:39.790
description in our query as this object.

18:39.790 --> 18:51.400
And we also said we want to query against the category and just a note here the find method works just

18:51.400 --> 18:52.740
like this.

18:52.840 --> 19:00.730
You provided object that you need the property that you need to query against the repository and it

19:00.730 --> 19:05.680
brings them up as the natural language that you provide.

19:05.680 --> 19:17.850
So in this case it's going to say that and description equals description and category equals category.

19:17.860 --> 19:23.280
All right let's make use of that named method to do that.

19:23.320 --> 19:31.610
I'm going to switch back to our application class and I'm going to say I need a list of products as

19:31.610 --> 19:47.550
the result and that is going to be results and I'll say I need find by description and category.

19:47.560 --> 19:56.710
So our first parameter and that's description it's going to be this is a test product.

19:56.860 --> 20:00.730
So I'm just going to copy and paste it.

20:01.000 --> 20:08.830
And our second parameter is the category and our categories for both object was test.

20:08.920 --> 20:27.320
So I'll say test and to print out result I'm going to say for each product product in results and I

20:27.320 --> 20:33.350
want to see that log that info and

20:37.560 --> 20:41.040
matching results are

20:43.780 --> 20:50.230
and I'll say product strength.

20:50.250 --> 20:55.600
All right to see clearly what we've done here.

20:55.600 --> 21:03.490
I'll just comment out these lines so we can focus on the line that we're interested in and I'm going

21:03.490 --> 21:04.930
to rerun our application

21:14.260 --> 21:24.330
and their application is starting up now.

21:24.520 --> 21:26.210
And here we go.

21:27.430 --> 21:29.050
Matching results are.

21:29.200 --> 21:36.240
And as you can see we found two of our objects in the database in our repository.

21:36.460 --> 21:40.760
And again the first one is the product one.

21:41.440 --> 21:49.230
And the second one that is out to the console is the second product product too right.
